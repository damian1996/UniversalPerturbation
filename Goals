Taski:
4. Generowanie video? Pasowałoby pokazać kilka głupich zachowań
7. Input + Pert = Perturbed Input (być może z jakimiś głupimi akcjami, które przez to podjeliśmy)
8. Transfer table (nr_games x nr_games x wynik [0,1]), dodać jakieś sensowne nazwy na osiach x,y albo legende
9. Transfer power (zbierać w plikach)
11. Wykresy dla jednej gry w stylu (różne przedziały perturbacji x znormalizowane wyniki x typ perturbacji (bez, losowa, na różnych grach))
13. Wszystkie wspomniane wykresy rysować w jupyterze
14. Przekminienie replay buffera? Czy jest w ogóle potrzebny?
15. Transfer między algorytmami (umożliwić proste sprawdzenie tego dla jednej lub wielu gier)
16. Porównanie między algorytmami dla jednej gry lub dla uśrednionych wielu gier
17. Ogarnac wszystkie #TODO

original vs random this vs random others vs trained this vs trained others

1. early stopping / scheduler w optimizerze
2. wykres z stddev - normalized or not?
3. ALA' PGD


Dla losowych nie trzeba liczyć 20x20x5, wystarczy 1x20x5z


2+
assault
bankheist
centipede
krull
pheonix

1
Breakout 0
ChopperCommand 0
Pong 0
UpNDown 0
YarsRevenge 0

Tematy:
Złe baseliney
Katalogi
Malunki
Gmumowe maszyny
50x50 czas trwania
Co zbieramy
PGD?
Rysunki z niezerową eksploracją (sanity check w appendixie)

Test phase:

Done:
0. Gmum tf.Session
1. Any batch taking more than 50% of given server resources has to be run with nice-9 (otherwise expect automatic kill).
2. Uczenie kilku różnych perturbacji (na razie tylko taka funkcjonalność, będzie używane później)
3. Losowanie nr_games gier sposrod wszystkich
5. Lepsze składowanie perturbacji, bo będą potrzebne wszystkie!
6. Przerobienie skryptu setup pod conde (czy przeróbki są konieczne?)
10. Zapisywać średnie znormalizowane wyniki i nieznormalizowane WSZYSTKIE (do liczenia stddev, var)

Not needed:
12. Zapisywanie tych wszystkich danych do neptuna? Czy warto wpierdzielać tutaj overhead webki?

run_experiment, generate_rollout, transfer_table_training

conda create --name univpert --file requirements.txt

Anaconda3-2020.02-Linux-x86_64.sh

https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

conda create -n univpert python=3.6
conda init bash
source activate univpert

curl -O https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.0_20191031/cudnn-10.0-linux-x64-v7.6.5.32.tgz

tar -xvzf /path/to/yourfile.tgz

scp damian@damian-Latitude-E6540:~/Downloads/cudnn-10.0-linux-x64-v7.6.5.32.tgz /path/to/destination



diff --git a/src/run_them_all.sh b/src/run_them_all.sh
index 91f9570..ade046e 100755
--- a/src/run_them_all.sh
+++ b/src/run_them_all.sh
@@ -8,5 +8,5 @@ array=( BankHeist Centipede Phoenix ChopperCommand Gopher Krull YarsRevenge Seaq
 for i in "${array[@]}"
 do
        echo $1
-       python3 make_transfer_table.py $1 $i
+       python3 make_transfer_table.py $1 $i $2
 done
(univpert) dstachura@Walter:~/UniversalPerturbation/src$ vim run_them_all.sh 
(univpert) dstachura@Walter:~/UniversalPerturbation/src$ git diff make_transfer_table.py
diff --git a/src/make_transfer_table.py b/src/make_transfer_table.py
index 6b9279c..9795053 100644
--- a/src/make_transfer_table.py